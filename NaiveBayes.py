import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import roc_curve, auc

# Veri setini yÃ¼kleyelim
df = pd.read_csv("diabetes_data_upload.csv")  # Dosya adÄ±nÄ± doÄŸru yazdÄ±ÄŸÄ±nÄ±zdan emin olun
df.head()

# 'Yes/No' gibi string ifadeleri sayÄ±sal verilere dÃ¶nÃ¼ÅŸtÃ¼r
df = df.replace({'Yes': 1, 'No': 0})
df = df.replace({'Male': 1, 'Female': 0})
df = df.replace({'Positive': 1, 'Negative': 0})
df.head()

# Ã–zellikler (X) ve hedef deÄŸiÅŸken (y)
X = df.drop("class", axis=1)  # class = hedef sÃ¼tun
y = df["class"]               # hedef deÄŸiÅŸken

# EÄŸitim ve test veri setlerini ayÄ±ralÄ±m
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Veriyi Ã¶lÃ§eklendirelim (StandardScaler ile)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Naive Bayes modelini oluÅŸturalÄ±m
model = GaussianNB()

# Modeli eÄŸitelim
model.fit(X_train_scaled, y_train)

# Test verisiyle tahmin yapalÄ±m
y_pred = model.predict(X_test_scaled)

# BaÅŸarÄ± metriklerini yazdÄ±ralÄ±m
print("âœ… DoÄŸruluk OranÄ± (Accuracy):", accuracy_score(y_test, y_pred))
print("\nğŸ“„ SÄ±nÄ±flandÄ±rma Raporu:\n", classification_report(y_test, y_pred))
print("\nğŸ§® KarÄ±ÅŸÄ±klÄ±k Matrisi:\n", confusion_matrix(y_test, y_pred))

# Modeli kaydedelim (pickle kullanarak)
with open("diabetes_modelNaivesBayes.pkl", "wb") as file:
    pickle.dump(model, file)

print("Model baÅŸarÄ±yla 'diabetes_modelNaivesBayes.pkl' olarak kaydedildi.")

# Confusion Matrix gÃ¶rselleÅŸtirmesini yapalÄ±m
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Tahmin Edilen')
plt.ylabel('GerÃ§ek')
plt.title('Naive Bayes KarÄ±ÅŸÄ±klÄ±k Matrisi')
plt.show()

# Gereksiz sÃ¼tunlarÄ± Ã§Ä±kararak modeli iyileÅŸtirelim
X_filtered = df.drop(["Age", "Obesity", "class"], axis=1)
y = df["class"]

X_train, X_test, y_train, y_test = train_test_split(X_filtered, y, test_size=0.2, random_state=42)

# Veriyi tekrar Ã¶lÃ§eklendir
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Yeni Naive Bayes modelini tekrar eÄŸitelim
model = GaussianNB()
model.fit(X_train_scaled, y_train)
y_pred = model.predict(X_test_scaled)

# Test verisi ile tahmin yapalÄ±m
y_pred = model.predict(X_test_scaled)

# BaÅŸarÄ± metriklerini tekrar yazdÄ±ralÄ±m
print("âœ… DoÄŸruluk OranÄ± (Accuracy):", accuracy_score(y_test, y_pred))
print("\nğŸ“„ SÄ±nÄ±flandÄ±rma Raporu:\n", classification_report(y_test, y_pred))
print("\nğŸ§® KarÄ±ÅŸÄ±klÄ±k Matrisi:\n", confusion_matrix(y_test, y_pred))

# Modelin baÅŸarÄ±mÄ±nÄ± daha iyi gÃ¶rmek iÃ§in ROC eÄŸrisini Ã§izelim
y_pred_prob = model.predict_proba(X_test_scaled)[:, 1]  # Modelin olasÄ±lÄ±k tahminlerini alÄ±yoruz
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)

# AUC'yi hesaplayalÄ±m
roc_auc = auc(fpr, tpr)

# ROC eÄŸrisini Ã§izelim
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label='ROC curve (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Random model iÃ§in diagonal Ã§izgi
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate (FPR)')
plt.ylabel('True Positive Rate (TPR)')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()
